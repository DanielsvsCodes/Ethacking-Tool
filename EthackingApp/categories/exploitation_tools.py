from colorama import init, Fore, Style
from modules.exploitation_tools_functions.ddos import DDOSAttack
from modules.exploitation_tools_functions.brute_force import BruteForce
from modules.exploitation_tools_functions.password_cracking import PasswordCracker
from modules.exploitation_tools_functions.reverse_shell import ReverseShellRunner
from modules.exploitation_tools_functions.packet_injection import PacketInjector
from modules.exploitation_tools_functions.mitm_attack import MITMAttack
from modules.exploitation_tools_functions.crack_wifi_password import WiFiCracker
import os
import subprocess

init(autoreset=True)

def clear_console():
    """Clears the terminal screen."""
    if os.name == 'nt':
        subprocess.call('cls', shell=True)
    else:
        subprocess.call('clear', shell=True)

def exploitation_tools_menu():
    """Menu for Exploitation Tools"""
    while True:
        print(f"{Style.BRIGHT}{Fore.CYAN}Exploitation Tools{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}1. DOS/DDoS Attack")
        print(f"{Fore.YELLOW}2. Brute Force Attack")
        print(f"{Fore.YELLOW}3. Password Cracking")
        print(f"{Fore.YELLOW}4. Reverse Shell")
        print(f"{Fore.YELLOW}5. Packet Injection")
        print(f"{Fore.YELLOW}6. MITM Attack")
        print(f"{Fore.YELLOW}7. WiFi Password Cracking")
        print(f"{Fore.RED}8. Back to Main Menu")

        choice = input(f"{Fore.GREEN}Select an option: {Style.RESET_ALL}")

        if choice == "1":
            target_url = input(f"{Fore.GREEN}Enter the target URL (e.g., example.com): ")
            number_of_requests = input(f"{Fore.GREEN}Enter the number of requests to send: ")
            
            try:
                ddos = DDOSAttack(target_url, int(number_of_requests))
                ddos.run()
            except ValueError as e:
                print(e)

        elif choice == "2":
            target_url = input(f"{Fore.GREEN}Enter the target URL (e.g., example.com/login): ")
            username = input(f"{Fore.GREEN}Enter the username: ")
            wordlist_path = input(f"{Fore.GREEN}Enter the path to the wordlist file: ")

            brute_force = BruteForce(target_url, username, wordlist_path)
            brute_force.run()

        elif choice == "3":
            hash_file_path = input(f"{Fore.GREEN}Enter the path to the file containing hashed passwords: ")
            wordlist_path = input(f"{Fore.GREEN}Enter the path to the wordlist file: ")
            hash_type = input(f"{Fore.GREEN}Enter hash type (e.g., md5, sha1, sha256): ")

            password_cracker = PasswordCracker(hash_file_path, wordlist_path, hash_type)
            password_cracker.run()

        elif choice == "4":
            reverse_shell_runner = ReverseShellRunner()
            reverse_shell_runner.run() 

        elif choice == "5":
            target_ip = input(f"{Fore.GREEN}Enter the target IP address: ").strip()
            packet_count = input(f"{Fore.GREEN}Enter the number of packets to send: ").strip()
            interface = input(f"{Fore.GREEN}Enter the network interface (default is eth0): ").strip() or "eth0"

            try:
                injector = PacketInjector(target_ip, packet_count, interface)
                injector.run()
            except ValueError as e:
                print(e)

        elif choice == "6":
            target_ip = input(f"{Fore.GREEN}Enter the target IP address: ").strip()
            gateway_ip = input(f"{Fore.GREEN}Enter the gateway IP address: ").strip()
            interface = input(f"{Fore.GREEN}Enter the network interface (default is eth0): ").strip() or "eth0"

            try:
                mitm = MITMAttack(target_ip, gateway_ip, interface)
                mitm.run()
            except ValueError as e:
                print(e)

        elif choice == "7":
            interface = input(f"{Fore.GREEN}Enter wireless interface (e.g., wlan0): ").strip()
            bssid = input(f"{Fore.GREEN}Enter target BSSID (optional for network listing): ").strip() or None
            channel = input(f"{Fore.GREEN}Enter channel (optional for network listing): ").strip() or None
            wordlist = input(f"{Fore.GREEN}Enter path to wordlist (optional for network listing): ").strip() or None

            try:
                wifi_cracker = WiFiCracker(interface, bssid, channel, wordlist)
                wifi_cracker.run()
            except (ValueError, EnvironmentError, FileNotFoundError) as e:
                print(e)

        elif choice == "8":
            break
        else:
            print(f"{Fore.RED}Invalid choice.")
        
        input(f"{Fore.MAGENTA}Press Enter to return to the [Exploitation Tools] menu...{Style.RESET_ALL}")
        clear_console()
