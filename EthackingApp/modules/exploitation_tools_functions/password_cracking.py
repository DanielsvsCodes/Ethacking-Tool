import hashlib
import os

class PasswordCracker:
    def __init__(self, hash_file_path, wordlist_path, hash_type='md5'):
        """
        Initialize the PasswordCracker class with necessary parameters.
        :param hash_file_path: Path to the file containing hashed passwords.
        :param wordlist_path: Path to the wordlist file containing potential passwords.
        :param hash_type: The type of hash (e.g., 'md5', 'sha1', 'sha256'). Default is 'md5'.
        """
        self.hash_file_path = hash_file_path
        self.wordlist_path = wordlist_path
        self.hash_type = hash_type.lower()

    def hash_password(self, password):
        """
        Hash a password using the specified hash type.
        :param password: The password to hash.
        :return: The hashed password as a hexadecimal string.
        """
        hash_function = getattr(hashlib, self.hash_type)
        return hash_function(password.encode()).hexdigest()

    def run(self):
        """
        Run the password cracking process using a dictionary attack.
        """
        print(f"Running Password Cracking using {self.hash_type.upper()}...")

        try:
            with open(self.hash_file_path, 'r') as hash_file:
                hashed_passwords = hash_file.read().splitlines()

            with open(self.wordlist_path, 'r') as wordlist_file:
                wordlist = wordlist_file.read().splitlines()

            cracked_passwords = {}

            for word in wordlist:
                hashed_word = self.hash_password(word)
                if hashed_word in hashed_passwords:
                    print(f"[+] Password cracked: {word} (hash: {hashed_word})")
                    cracked_passwords[hashed_word] = word
                    hashed_passwords.remove(hashed_word)

            if not cracked_passwords:
                print("[!] No passwords were cracked.")
            else:
                print(f"[+] Total passwords cracked: {len(cracked_passwords)}")

        except FileNotFoundError as e:
            print(f"[-] File not found: {e.filename}")
        except Exception as e:
            print(f"[-] An unexpected error occurred: {e}")


if __name__ == "__main__":
    hash_file_path = os.path.join('resources', 'hashed_passwords.txt')
    wordlist_path = os.path.join('resources', 'password_wordlist.txt')

    hash_type = input("Enter hash type (e.g., md5, sha1, sha256): ")

    password_cracker = PasswordCracker(hash_file_path, wordlist_path, hash_type)
    password_cracker.run()
